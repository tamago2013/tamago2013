//human-detector

#include <stdio.h>
#include <vector>
#include <iostream>
//#include <kaw_lib/SSM-Image.hpp>

#include <stdint.h>
#include "gnd-gridmap.hpp"
//#include "gnd-bmp.hpp"
//#include "gnd-opsm.hpp"

#include <opencv2/opencv.hpp>
#include <cvblob.h>

#include <ssm.hpp>
#include "ssm-laser.hpp"
#include <ssmtype/spur-odometry.h>
#include "ssm-cluster.hpp"

//#include "ysd-color-detector.hpp"
#include "ysd-time.hpp"
#include "ysd-signal.hpp"

using namespace std;
//using namespace cv;   //これやめた方がいいだろ。何使ってるかわからなくなっちゃう

class cell
{
public:
    int acm;
    bool isacm;
    int clustering_label;

    cell()  //initialize
    {
        this->acm = 0;
        this->isacm = false;
        this->clustering_label = 0;
    }

};


int check_grid_label(gnd::gridmap::gridplane<cell> &grid_map, int r, int c)
{
    cell *p;
    if( !(p = grid_map.pointer(r, c)) )
    {//グリッドがない（はしっっこ）
        return -1;
    }
    else
    {//通常の処理
        return p->clustering_label;
    }
}

vector< vector <int> > look_up_table;

int readjust(int n_0, int n_1)
{
    int ans = n_0;
    for(int i = 0; i < look_up_table.size(); ++i)
    {
        if(look_up_table[i][0] == n_1){
            ans = i;
//            fprintf(stderr, "%d is searched [%d][%d]\n", n_1, look_up_table[ans][0], look_up_table[ans][1]);
            look_up_table[i][1] = readjust(i, look_up_table[i][1]);
        }
    }
    return look_up_table[ans][1];
}

inline void blob_detect(cv::Mat &src, cvb::CvBlobs* blobs)
{
    IplImage img = src;
    IplImage *chB = cvCreateImage(cvGetSize(&img), 8, 1);
    IplImage *labelImg = cvCreateImage(cvGetSize(&img), IPL_DEPTH_LABEL, 1);

    cvSplit(&img, chB, NULL, NULL, NULL);

    unsigned int result = cvb::cvLabel(chB, labelImg, *blobs);

    cvReleaseImage(&chB);
    cvReleaseImage(&labelImg);
}


int main( int argc, char* argv[] )
{
    // ---> declaration
    SSMApi<Spur_Odometry> ssm_odom;
    SSMSOKUIKIData3D fs;

    SSMApi<ysd::cluster> cluster;

    double acm_term = 5.0;      //[sec]
    double acm_interval = 0.1;  //[sec]
    int acm_threshold = 10;

    int diff_thresh = 50;

    double row_size = 10.0;         //[m]
    double column_size = 10.0;      //[m]
    double cel_size_row = 0.05;     //[m]
    double cel_size_column = 0.05;  //[m]

    /*  //1005は差分とらない
    gnd::opsm::map_t  opsm_map;
    gnd::opsm::cmap_t cnt_map;
    gnd::bmp8_t       bmp_map;
    */

    /*//1005は差分とらない
    string fname = "../../data/LBuilding/opsm-map";
    const char *dirname = fname.c_str();
    */

    gnd::gridmap::gridplane<cell> grid_map;

    // <--- declaration



    // ---> initialize

    if( !initSSM() )
    {
        cerr << "SSM Error : initSSM()" << endl;
        return -1;
    }

    int ret = ssm_odom.openWait(SNAME_ODOMETRY /*ADJUST, ODOMETRY*/, 0, 0.0, SSM_READ);
    if( ret != 1 ){
        fprintf(stderr, "open ssm_odom failure\n");
        return -1;
    }

    ret = fs.openWait(SSM_NAME_SOKUIKI_3D_FS, /*fs_ssm_id*/0, 0.0, SSM_READ) && fs.getProperty();	//fsのssmdデータとプロパティ情報の取得
    if( ret != 1 ){
        fprintf(stderr, "open sokuiki_fs failure %s\n", SSM_NAME_SOKUIKI_3D_FS);
        return -1;
    }

    grid_map.pallocate(row_size, column_size, cel_size_row, cel_size_column);
    ssm_odom.readLast();
    grid_map.pset_origin(row_size/2.0, column_size/2.0);
//    grid_map.pset_origin(ssm_odom.data.x, ssm_odom.data.y);
    cell init_cell;
    grid_map.set_uniform(&init_cell);

    /*// ---> map load    //1005は差分とらない
    if( gnd::opsm::read_counting_map(&cnt_map, dirname) < 0)
    {
        fprintf(stderr, "map death!\n");
    }
    if( gnd::opsm::build_map(&opsm_map, &cnt_map, gnd_mm2dist(1)) < 0 ) {
        fprintf(stderr, "map death!\n");
    }
    if( gnd::opsm::build_bmp(&bmp_map, &opsm_map, gnd_m2dist(1.0/10)) < 0 )
    {
        fprintf(stderr, "map death!\n");
    }
    fprintf(stderr, "まっぷ読み込み成功\n");
    */// <--- map load

    ysd::setSigInt();
    // <--- initialize

    // ---> operation
    double start = ysd::time::gettimeofday_sec();
    while( !ysd::gShutOff )
    {  // ---> acm
        //    grid_map.pset(1.0, 1.0, &one);  //これでもいい

        // ---> intereval timer
//        time_end = ysd::time::gettimeofday_sec();
//        usleepSSM( (int)(1000000.0*(acm_interval - time_end + time_start)) );
//        time_start = ysd::time::gettimeofday_sec();
        ysd::time::interval_timerSSM(acm_interval);
        fprintf(stderr, "time: %lf\n", ysd::time::gettimeofday_sec() );
        if ((ysd::time::gettimeofday_sec() - start) > acm_term) break;   //debug用のだっっっっしゅつ
        // <--- intereval timer

        fs.readLast();
        ssm_odom.readTime(fs.time);
        double sin_theta = sin(ssm_odom.data.theta);
        double cos_theta = cos(ssm_odom.data.theta);
        cell *p;
        for(int step = 0; step < fs.property.numPoints; ++step)
        {
            if(fs.data[step].isWarning() == false)
            {
                double scan_point_gl_x = fs.data[step].reflect.x*cos_theta - fs.data[step].reflect.y*sin_theta + ssm_odom.data.x;
                double scan_point_gl_y = fs.data[step].reflect.x*sin_theta + fs.data[step].reflect.y*cos_theta + ssm_odom.data.y;
                //            printf("[scan_URG] %lf %lf\n", scan_point_gl_x, scan_point_gl_y);
                if( !(p = grid_map.ppointer(scan_point_gl_x, scan_point_gl_y)) )
                {
                    grid_map.reallocate(scan_point_gl_x, scan_point_gl_y);
                    p = grid_map.ppointer(scan_point_gl_x, scan_point_gl_y);
                }
                if(p->isacm == false)
                {
                    p->acm = p->acm + 1;  //ここで投票
                    p->isacm = true;
                }
            }
        }
        for(int c=0; c<(signed)grid_map.column(); c++)
        {
            for(int r=0; r<(signed)grid_map.row(); r++)
            {
                p = grid_map.pointer(r, c);
                p->isacm = false;
            }
        }

    }// <--- acm


    double tstart = ysd::time::gettimeofday_sec();

    fprintf(stderr, "動物体取り除く\n");
    // ---> remove moving object
    for(int c = 0; c < grid_map.column(); c++)
    {
        for(int r = 0; r < grid_map.row(); r++)
        {
            cell *p;
            p = grid_map.pointer(r, c);
            if(grid_map.value(r, c).acm < acm_threshold)
            {
                p->acm = 0;
//                fprintf(stderr, "remove moving object\n");
            }
            else
            {
                p->acm = 1;
            }
        }
    }
    //デバッグ用履きだっ数
//    for(int c=0; c<(signed)grid_map.column(); c++)
//    {
//        for(int r=0; r<(signed)grid_map.row(); r++)
//        {
//            if( grid_map.value(r, c).acm >=diff_thresh )
//            {
//                double x, y;
//                grid_map.pget_pos_core(r, c, &x, &y);
//                printf("[scan_rm_mov] %lf %lf %d\n", x, y, grid_map.value(r, c).acm);
//                fflush(stdout);
//            }
//        }
//    }

    // <--- remove moving object



    /*// ---> take diff
    fprintf(stderr, "差分とる\n");
    for(int c = 0; c < grid_map.column(); c++)
    {
        for(int r = 0; r < grid_map.row(); r++)
        {
            cell *p;
            p = grid_map.pointer(r, c);
            double x, y;
            grid_map.pget_pos_core(r, c, &x, &y);
//            fprintf(stderr, "(x, y): (%lf, %lf)\n", x, y);
            unsigned char *isexist;
            if( !(isexist = bmp_map.ppointer(x, y)) )
            {

            }
            else
            {
                if((int)bmp_map.pvalue(x, y) >= grid_map.value(r, c).acm )
                {
//                    fprintf(stderr, "take diff\n");
                    p->acm = 0;
                }
            }
        }
    }
    fprintf(stderr, "差分とる finish\n");
    //吐き出すう
    fprintf(stderr, "吐き出す\n");
    for(int c=0; c<(signed)grid_map.column(); c++)
    {
        for(int r=0; r<(signed)grid_map.row(); r++)
        {
            if( grid_map.value(r, c).acm >=1 )
            {
                double x, y;
                grid_map.pget_pos_core(r, c, &x, &y);
                printf("[scan_diff] %lf %lf %d\n", x, y, grid_map.value(r, c).acm);
                fflush(stdout);
            }
        }
    }
    */// <--- take diff

    cv::Mat current_scan = cv::Mat::zeros(grid_map.row(), grid_map.column(), CV_8U);

//    cv::Mat a = current_scan.clone();

    for(int r = 0; r < grid_map.row(); ++r)
    {
        for(int c = 0; c < grid_map.column(); ++c)
        {
            if(grid_map.value(r, c).acm > 0)
            {
//                current_scan.at<unsigned char>(r, c) = 255;
                current_scan.data[r * current_scan.cols + c] = 255;
            }
        }
    }
    cv::namedWindow("current_scan", CV_WINDOW_NORMAL | CV_WINDOW_KEEPRATIO);
    cv::imshow("current_scan", current_scan);
//    cv::imshow("a", a);

    cv::Mat current_scan_color;
    cv::cvtColor(current_scan, current_scan_color, CV_GRAY2BGR);

    cvb::CvBlobs blobs;

    blob_detect(current_scan_color, &blobs);
    cvb::cvFilterByArea(blobs, 5, 100000);

    IplImage img = current_scan_color;    //いらん
    IplImage *labelImg = cvCreateImage(cvGetSize(&img), IPL_DEPTH_LABEL, 1);  //いらん

    cvb::cvRenderBlobs(labelImg, blobs, &img, &img);

    cv::Mat out = cv::cvarrToMat(&img);

    cv::namedWindow("out", CV_WINDOW_NORMAL | CV_WINDOW_KEEPRATIO);
    cv::imshow("out", out);

    for(cvb::CvBlobs::iterator it = blobs.begin(); it != blobs.end(); ++it)
    { // ---> for each cap blob
        cvb::CvBlob *blob=(*it).second;
        printf("\n---------------------------------------\n");
        printf("max(%d, %d) min(%d, %d)\n", blob->maxx, blob->maxy, blob->minx, blob->miny);
        printf("centroid(%lf, %lf)\n", blob->centroid.x, blob->centroid.y);
        cerr << "blob->area " << blob->area << endl;
        cerr << "blob->label " << blob->label << endl;
    }
    printf("%d blobs\n", blobs.size());

    fprintf(stderr, "time : %lf (sec)\n", ysd::time::gettimeofday_sec() - tstart);

    cv::waitKey(0);










    // ---> clustering
    cerr << "clustering start" << endl;
    //gird_mapに対してクラスタリングする
    //ラベリング処理によるクラスタリング
    //とりあえず８近傍

//    vector< vector <int> > look_up_table;
    vector<int> tmp;
    tmp.resize(2);
    int max_label = 1;    //ラベル
    int neighbor[4] = {0, 0, 0, 0};

    for(int c = 0; c < grid_map.column(); ++c)
    {
        for(int r = 0; r < grid_map.row(); ++r)
        {
            //非ゼログリッドチェック
            if(grid_map.value(r, c).acm >= 1)
            {
                //近傍をチェック
                //左下からスタートしてるから近傍の位置が違う
                neighbor[0] = check_grid_label(grid_map, r-1, c-1); //左下: r-1, c-1
                neighbor[1] = check_grid_label(grid_map, r-1, c);   //下: r-1, c
                neighbor[2] = check_grid_label(grid_map, r-1, c+1); //右下: r-1, c+1
                neighbor[3] = check_grid_label(grid_map, r, c-1);   //左: r, c-1

                cell *p;
                p = grid_map.pointer(r, c);

                if(neighbor[0] == 0 && neighbor[1] == 0 && neighbor[2] == 0 && neighbor[3] == 0)
                {   //すべての近傍がゼロの場合
                    p->clustering_label = max_label;
                    ++max_label;
                }
                else
                {   //近傍の最小値をラベリング
                    // ---> 最小値探索
                    int min = 10000;
                    for(int i=0; i<4; ++i)
                    {
                        if((min > neighbor[i]) && (neighbor[i] != 0))
                        {
                            min = neighbor[i];
                        }
                    }
                    // <--- 最小値探索

                    //ラベルの張替え
                    p->clustering_label = min;

                    //ルックアップテーブルの更新
                    for(int i = 0; i < 4; ++i)
                    {
                        if(neighbor[i] > min)
                        {
                            tmp[0] = neighbor[i];
                            tmp[1] = min;
                            look_up_table.push_back(tmp);
                        }
                    }
                }
            }
            neighbor[0] = 0;
            neighbor[1] = 0;
            neighbor[2] = 0;
            neighbor[3] = 0;

        }
    }

    //ルックアップテーブルの整理
    for(int i = 0; i < look_up_table.size(); ++i)
    {
        look_up_table[i][1] = readjust(i, look_up_table[i][1]);
    }

    //ルックアップテーブルを参照してラベルを張り替える
    fprintf(stderr, "張り替える\n");
    cell *p;
    for(int lut = 0; lut < look_up_table.size(); ++lut)
    {
        for(int c = 0; c < grid_map.column(); ++c)
        {
            for(int r = 0; r < grid_map.row(); ++r)
            {
                //非ゼログリッドチェック
                if(grid_map.value(r, c).clustering_label == look_up_table[lut][0])
                {
                    p = grid_map.pointer(r, c);
                    p->clustering_label = look_up_table[lut][1];
                }
            }
        }
    }
    // <--- clustering

    //吐き出すう
    fprintf(stderr, "吐き出す\n");
    for(int c=0; c<(signed)grid_map.column(); c++)
    {
        for(int r=0; r<(signed)grid_map.row(); r++)
        {
            if( grid_map.value(r, c).acm >=1 )
            {
                double x, y;
                grid_map.pget_pos_core(r, c, &x, &y);
//                printf("[scan_cluster] %lf %lf %d\n", x, y, grid_map.value(r, c).clustering_label);

            }
        }
    }

    fprintf(stderr, "time : %lf (sec)\n", ysd::time::gettimeofday_sec() - tstart);

//    for(int i = 0; i < look_up_table.size(); ++i)
//    {
//        fprintf(stderr, "%3d %3d %3d\n", i, look_up_table[i][0], look_up_table[i][1]);
//    }



    // <--- operation



    // ---> finalize
    grid_map.deallocate();
//    bmp_map.deallocate(); //1005は差分とらない

    ssm_odom.close();
    fs.close();
    endSSM();
    cerr << "\n" << "End SSM" << endl;

    cerr << "End Successfully" << endl;
    // <--- finalize

    return 0;
}
